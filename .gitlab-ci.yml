default:
  interruptible: true
  image: docker:latest
  services:
    - docker:dind
  timeout: 30m

variables:
  PROJECT_NAME: demo
  GIT_SUBMODULE_STRATEGY: normal
  DEPLOYMENT_HOST_USER: root
  DEPLOYMENT_PORT: 2222
  DAST_WEBSITE: https://staging.${PROJECT_NAME}.openremote.io
  PLATFORM: linux/amd64,linux/arm64

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "master"
      when: never
    - when: always

stages:
  - prebuild
  - build
  - deploy_ovh
  - build_fail
  - test
  - tests_fail
  - deploy
  - dast
  - cleanup

lint-Dockerfile:
  stage: build
  script:
    - docker pull hadolint/hadolint
    - docker run --rm -i hadolint/hadolint < Dockerfile
  allow_failure: true
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-build/
      when: never

lint-swarm-Dockerfile:
  stage: build
  script:
    - echo "I'm in the branch $CI_COMMIT_BRANCH $CI_COMMIT_MESSAGE"
    - docker pull hadolint/hadolint
    - docker run --rm -i hadolint/hadolint < ./manager/swarm.Dockerfile
  after_script:
    - env
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-build/
      when: never

build-enviroment:
  stage: prebuild
  before_script:
    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - mkdir -p /root/.docker/cli-plugins
    - mv .docker/cli-plugins/docker-buildx /root/.docker/cli-plugins/
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
  script:
    - docker buildx use default
    - docker buildx ls
    - docker context ls
    - docker buildx build --pull -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /skip-build/
      when: never
    - changes:
        - Dockerfile

build-deployment-manager-swarm:
  stage: build
  allow_failure: true
  before_script:
    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - mkdir -p /root/.docker/cli-plugins
    - mv .docker/cli-plugins/docker-buildx /root/.docker/cli-plugins/
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
  script:
    - docker buildx ls
    - docker context ls
    - docker run -v $(pwd):/or "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "./gradlew --console plain clean installDist"
    # Build multi-arch images
    - docker buildx build --push --platform $PLATFORM -t openremote/manager:latest manager/build/install/manager
    - docker buildx build --push --platform $PLATFORM -t openremote/deployment:latest deployment
    - docker buildx build --push --platform $PLATFORM -t openremote/manager-swarm:latest -f manager/build/install/manager/swarm.Dockerfile manager/build/install/manager
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-build/
      when: manual
  retry:
    max: 2

build-keycloak-postgresql-proxy:
  stage: build
  allow_failure: true
  before_script:
    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - mkdir -p /root/.docker/cli-plugins
    - mv .docker/cli-plugins/docker-buildx /root/.docker/cli-plugins/
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker login -u "$DOCKERHUB_USER" -p "$DOCKERHUB_PASSWORD"
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --use
  script:
    - docker buildx build --push --platform $PLATFORM -t openremote/proxy:latest proxy
    - docker buildx build --push --platform linux/amd64 -t openremote/keycloak:latest keycloak
    - docker buildx build --push --platform $PLATFORM -t openremote/postgresql:latest postgresql
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /skip-build/
      when: never
    - changes:
        - proxy/**/*
        - postgresql/**/*
        - keycloak/**/*
    - when: manual
  retry:
    max: 2

.email_template: &notify_email
  image: docker:latest
  before_script:
    - cat $AWS_MAIL > aws_mail.py
  script:
    - docker pull registry.gitlab.com/openremote/openremote:master
    - export WHO=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%ce" -1)
    - export WHEN=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%ad %ar" -1)
    - export WHAT=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git log --pretty="%h %s" -1)
    - export REPO=$(docker run --rm -v $(pwd):/or registry.gitlab.com/openremote/openremote:master git remote get-url origin|xargs basename)
    - echo $REPO
    - docker run -v $(pwd):/usr/src/myapp -w /usr/src/myapp
      -e "STAGE=$CI_JOB_STAGE"
      -e "WHO=$WHO"
      -e "WHAT=$WHAT"
      -e "WHEN=$WHEN"
      -e "REPO=$REPO"
      -e "SMTP_USERNAME=$SMTP_USERNAME"
      -e "SMTP_PASSWORD=$SMTP_PASSWORD"
      --rm python:3 python aws_mail.py
  retry:
    max: 2

.notify_whatsapp: &notify_whatsapp
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  allow_failure: true
  variables:
    GIT_STRATEGY: none
  script:
    - >
      curl --location --request POST $WHATSAPP_API
      --header 'Content-Type: application/javascript'
      --data-raw "{
      \"message\": \"Your $CI_PROJECT_TITLE+$CI_JOB_STAGE code is $CI_JOB_NAME\",
      \"recipient\": \"$WHATSAPP_TEL\",
      \"user_id\": \"1\"
      }"
  retry:
    max: 2

.ssh_config: &ssh_config
  - mkdir -p ~/.ssh
  - chmod 600 "$GITLAB_SSH_PRIVATE_KEY"
  - eval "$(ssh-agent -s)"
  - ssh-add "$GITLAB_SSH_PRIVATE_KEY"
  - ssh-keyscan -H -p $DEPLOYMENT_PORT $DEPLOYMENT_HOST >> ~/.ssh/known_hosts
  - alias SSH="ssh -p $DEPLOYMENT_PORT ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}"
  - alias SCP="scp -p -r -P $DEPLOYMENT_PORT"

.deploy_template: &deploy_definition
  before_script:
    - *ssh_config
  script:
    - echo "Deploy to $CI_ENVIRONMENT_SLUG server"
    - echo "export CI_REGISTRY_IMAGE=openremote" >> deploy.sh
    - if [ ! $DOCKER_IMAGE_TAG ]; then echo "export CI_ENVIRONMENT=$CI_ENVIRONMENT_SLUG" >> deploy.sh; fi
    - if [ $DOCKER_IMAGE_TAG ]; then echo "export CI_ENVIRONMENT=$DOCKER_IMAGE_TAG" >> deploy.sh; fi
    - echo "export SETUP_WIPE_CLEAN_INSTALL=$SETUP_WIPE_CLEAN_INSTALL" >> deploy.sh
    - if [ $SETUP_ADMIN_PASSWORD ]; then echo "export SETUP_ADMIN_PASSWORD=$SETUP_ADMIN_PASSWORD" >> deploy.sh; fi
    - if [ $NEW_IMAGES ]; then echo "docker pull \$CI_REGISTRY_IMAGE/manager:\$CI_ENVIRONMENT"    >> deploy.sh; fi
    - if [ $NEW_IMAGES ]; then echo "docker pull \$CI_REGISTRY_IMAGE/deployment:\$CI_ENVIRONMENT" >> deploy.sh; fi
    - if [ $NEW_IMAGES ]; then echo "docker pull \$CI_REGISTRY_IMAGE/proxy:\$CI_ENVIRONMENT"      >> deploy.sh; fi
    - if [ $NEW_IMAGES ]; then echo "docker pull \$CI_REGISTRY_IMAGE/postgresql:\$CI_ENVIRONMENT" >> deploy.sh; fi
    - if [ $NEW_IMAGES ]; then echo "docker pull \$CI_REGISTRY_IMAGE/keycloak:\$CI_ENVIRONMENT"   >> deploy.sh; fi
    - echo "docker-compose -p $PROJECT_NAME -f profile/demo-openremote.yml down || exit 666" >> deploy.sh
    - echo "docker volume rm ${PROJECT_NAME}_deployment-data" >> deploy.sh
    - echo "docker-compose -p $PROJECT_NAME -f profile/demo-openremote.yml up --no-build -d || exit 666" >> deploy.sh
    - echo "docker cp FIREBASE_CONFIG_FILE ${PROJECT_NAME}_manager_1:/deployment/manager/fcm.json || exit 666" >> deploy.sh
    - echo "docker restart ${PROJECT_NAME}_manager_1 || exit 666" >> deploy.sh
    - chmod +x deploy.sh
    - SSH mkdir -p profile deployment proxy manager/build/install/manager postgresql keycloak
    - SCP ./profile/ deploy.sh ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/
    - SCP ${FIREBASE_CONFIG_FILE} ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/FIREBASE_CONFIG_FILE
    - SSH ./deploy.sh
    - SSH "docker system prune -f; docker images -q --filter dangling=true | xargs docker rmi; rm -rf proxy/ manager/ postgresql/ keycloak/ profile/ deployment/ deploy.sh .docker/config.json"
  after_script:
    - *ssh_config
    - SSH "docker logs ${PROJECT_NAME}_proxy_1 &> proxy_${CI_ENVIRONMENT_SLUG}.log"
    - SSH "docker logs ${PROJECT_NAME}_manager_1 &> manager_${CI_ENVIRONMENT_SLUG}.log"
    - SSH "docker logs ${PROJECT_NAME}_keycloak_1 &> keycloak_${CI_ENVIRONMENT_SLUG}.log"
    - SSH "docker logs ${PROJECT_NAME}_postgresql_1 &> postgresql_${CI_ENVIRONMENT_SLUG}.log"
    - SCP ${DEPLOYMENT_HOST_USER}@${DEPLOYMENT_HOST}:~/*.log .
    - SSH "rm ~/*.log"
  artifacts:
    paths:
      - proxy_${CI_ENVIRONMENT_SLUG}.log
      - manager_${CI_ENVIRONMENT_SLUG}.log
      - keycloak_${CI_ENVIRONMENT_SLUG}.log
      - postgresql_${CI_ENVIRONMENT_SLUG}.log
    expire_in: 1 week
  retry:
    max: 2

# This step is executed when build fails. The purpose is to e-mail a git commiter about the problem.
email failed build:
  stage: build_fail
  <<: *notify_email
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /deploy-demo/
      when: on_failure
    - if: $CI_COMMIT_MESSAGE =~ /skip-build/
      when: never
    - when: on_failure

build FAILED:
  stage: build_fail
  <<: *notify_whatsapp
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /deploy-demo/
      when: on_failure
    - if: $CI_COMMIT_MESSAGE =~ /skip-build/
      when: never
    - when: on_failure

test-master:
  stage: test
  before_script:
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "docker-compose -f profile/dev-testing.yml pull"
    - docker run -v $(pwd):/or
      -v /var/run/docker.sock:/var/run/docker.sock "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
      /bin/sh -c "docker-compose -f profile/dev-testing.yml up --no-build -d"
  script:
    #- docker run --network host -v $(pwd):/or "$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"
    #  /bin/sh -c "./gradlew clean test"
    - echo Tests are skipped
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: delayed
      start_in: 2h # Give github actions time to finish (usually a little more than 1h)
  artifacts:
    when: on_failure
    paths:
      - "test/build/reports/tests/test/*"
      - "test/build/reports/tests/test/*/*"
    expire_in: 4 weeks
  retry:
    max: 2

deploy demo on OVH:
  stage: deploy_ovh
  allow_failure: true
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /deploy-demo/
      when: never
    - if: $CI_COMMIT_MESSAGE !~ /skip-build/
      when: manual
  variables:
    DEPLOYMENT_HOST: ${PROJECT_NAME}.openremote.io
    SETUP_WIPE_CLEAN_INSTALL: "true"
    DOCKER_IMAGE_TAG: latest
    NEW_IMAGES: "true"
  environment:
    name: demo
    url: https://${PROJECT_NAME}.openremote.io
  <<: *deploy_definition

redeploy demo on OVH:
  stage: deploy_ovh
  allow_failure: true
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /deploy-demo/
      when: on_success
  variables:
    DEPLOYMENT_HOST: ${PROJECT_NAME}.openremote.io
    SETUP_WIPE_CLEAN_INSTALL: "true"
    DOCKER_IMAGE_TAG: latest
  environment:
    name: demo
    url: https://${PROJECT_NAME}.openremote.io
  <<: *deploy_definition

email failed tests:
  stage: tests_fail
  needs: ["test-master"]
  before_script:
    - export STAGE='tests'
  <<: *notify_email
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: on_failure

test FAILED:
  stage: tests_fail
  needs: ["test-master"]
  <<: *notify_whatsapp
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-test/
      when: on_failure

manual delete aws cloudformation stack:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest
  stage: cleanup
  before_script:
    - |-
      PAYLOAD=$(cat << JSON
      {
        "select":{"include":"ALL_EXCEPT_PATH"},
        "type":{"predicateType":"string","value":"urn:openremote:asset:flight"}
      }
      JSON
      )
    - echo $PAYLOAD
    - export OR_ENDPOINT=$(aws cloudformation describe-stacks --stack-name openremote
      --query "Stacks[0].Outputs[?OutputKey=='InstanceIP'].OutputValue" --output text)
    - >
      curl -X POST --insecure https://$OR_ENDPOINT/api/master/asset/query 
      --header 'Content-Type: application/json; charset=utf-8'
      --data-binary "$PAYLOAD"
  script:
    - aws cloudformation delete-stack --stack-name $AWS_STACK_NAME
    - aws cloudformation wait stack-delete-complete --stack-name $AWS_STACK_NAME
  allow_failure: true # set when:manual optional and not blocking
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /skip-deploy/
      when: never
