apply plugin: "groovy"
apply plugin: "cz.habarta.typescript-generator"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "cz.habarta.typescript-generator:typescript-generator-gradle-plugin:$typescriptGeneratorVersion"
    }
}

dependencies {
    compile resolveProject(":model")
    compile "cz.habarta.typescript-generator:typescript-generator-core:$typescriptGeneratorVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"
}

task generateTypescriptModelInfo(type: cz.habarta.typescript.generator.gradle.GenerateTask) {
    classPatterns = [
        "org.openremote.model.**"
    ]
    jsonLibrary = "jackson2"
    outputKind = "module"
    generateInfoJson = true
    excludeClassPatterns = [
        "org.openremote.model.event.shared.*Filter**",
        "org.openremote.model.util.**",
        "org.openremote.model.flow.**",
        "org.openremote.model.**Resource**"
    ]
    customTypeNamingFunction = "function(name, simpleName) { if (name.indexOf(\"\$\") > 0) return name.substr(name.lastIndexOf(\".\")+1).replace(\"\$\",\"\"); }"
    customTypeMappings = [
        "com.fasterxml.jackson.databind.node.ObjectNode:{ [id: string]: any }"
    ]
    optionalProperties = "all" // TODO: cleanup model to be more explicit about optional params
    mapEnum = cz.habarta.typescript.generator.EnumMapping.asEnum
    mapDate = cz.habarta.typescript.generator.DateMapping.asNumber
    jackson2Modules = [
        "com.fasterxml.jackson.datatype.jdk8.Jdk8Module",
        "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule",
        "com.fasterxml.jackson.module.paramnames.ParameterNamesModule"
    ]
}

generateTypeScript {
    dependsOn generateTypescriptModelInfo
    jsonLibrary = "jackson2"
    customTypeNamingFunction = "function(name, simpleName) { if (name.indexOf(\"\$\") > 0) return name.substr(name.lastIndexOf(\".\")+1).replace(\"\$\",\"\"); }"
    customTypeMappings = [
        "com.fasterxml.jackson.databind.node.ObjectNode:{ [id: string]: any }"
    ]
    classPatterns = [
        "org.openremote.model.**Resource"
    ]
    moduleDependencies = [
        new cz.habarta.typescript.generator.ModuleDependency(
            "@openremote/model",
            "Model",
            new File("$buildDir/typescript-generator/typescript-generator-info.json"),
            (String)null,
            (String)null
        )
    ]
    outputFile = "src/restclient.ts"
    outputFileType = "implementationFile"
    outputKind = "module"
    mapEnum = cz.habarta.typescript.generator.EnumMapping.asEnum
    mapDate = cz.habarta.typescript.generator.DateMapping.asNumber
    restNamespacing = "perResource"
    extensions = [
        "AggregatedApiClient",
        "cz.habarta.typescript.generator.ext.AxiosClientExtension"
    ]
}

clean {
    doLast {
        def dir = new File("${projectDir}/dist")
        dir.deleteDir()
    }
}

build.dependsOn generateTypeScript, npmBuild
npmBuild.dependsOn generateTypeScript

task prepareUi() {
    dependsOn clean, build, npmPrepare
}

task publishUi() {
    dependsOn clean, build, npmPublish
}
